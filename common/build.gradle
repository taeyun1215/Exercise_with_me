buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.7'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group 'global'
version 'unspecified'

java {
    sourceCompatibility = '11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.projectlombok:lombok:1.18.22'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //querydsl 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor(
            "com.querydsl:querydsl-apt:${queryDslVersion}:jpa",
            "javax.persistence:javax.persistence-api:2.2",
            "javax.annotation:javax.annotation-api:1.3.2"
    )

    // Axon Framework
    implementation 'org.axonframework:axon-spring-boot-starter:4.8.0' // 최신 버전에 따라 업데이트 필요
}

jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {
    dependsOn test // 리포트 생성을 위해서는 test가 먼저 완료되어야 함
    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }
    afterEvaldiruate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "**/*Application*",
                            '**/*Request*',
                            '**/*Response*',
                            '**/Swagger*',
                            '**/PasswordEncoderConfig*',
                            '**/JpaAuditingConfig*',
                            '**/common/**',
                            '**/*Builder*',
                    ])
                })
        )
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            excludes = [
                    "**/*Application*",
                    '**/*Request*',
                    '**/*Response*',
                    '**/Swagger*',
                    '**/PasswordEncoderConfig*',
                    '**/JpaAuditingConfig*',
                    '**/common/**'
            ]
        }
    }
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

bootJar {
    enabled = false
}

test {
    useJUnitPlatform()
}