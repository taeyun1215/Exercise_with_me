plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.1'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
}

group = 'user'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.4")
}

dependencies {
    // common module
    implementation project(path: ':common')

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    testImplementation 'junit:junit:4.13.1'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // Junit5
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    // Gson
    implementation 'com.google.code.gson:gson:2.9.0'

    // netflix-eureka
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.1.0'

    // kafka
    implementation 'org.springframework.kafka:spring-kafka'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'  // 테스트 종료후 항상 리포트 생성
}

jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {
    dependsOn test // 리포트 생성을 위해서는 test가 먼저 완료되어야 함
    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "**/*Application*",
                            '**/*Request*',
                            '**/*Response*',
                            '**/Swagger*',
                            '**/PasswordEncoderConfig*',
                            '**/JpaAuditingConfig*',
                            '**/common/**',
                            '**/*Builder*',
                    ])
                })
        )
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            excludes = [
                    "**/*Application*",
                    '**/*Request*',
                    '**/*Response*',
                    '**/Swagger*',
                    '**/PasswordEncoderConfig*',
                    '**/JpaAuditingConfig*',
                    '**/common/**'
            ]
        }
    }
}