plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.1'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'user'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.4")
}

// Spring Rest Docs
configurations {
    asciidoctorExt
}

dependencies {
    // common module
    implementation project(path: ':common')

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.jetbrains:annotations:20.1.0'

    testImplementation 'junit:junit:4.13.1'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // H2
    testImplementation 'com.h2database:h2:1.4.200'

    // Junit5
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    // Gson
    implementation 'com.google.code.gson:gson:2.9.0'

    // Netflix-eureka
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.1.0'

    // kafka
    implementation 'org.springframework.kafka:spring-kafka'

    // Spring Rest Docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

// Spring Rest Docs
ext {
    snippetsDir = file('build/generated-snippets') // 아래서 사용할 변수
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'  // 테스트 종료후 항상 리포트 생성
    outputs.dir snippetsDir // Spring Rest Docs
}

// Spring Rest Docs
asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
    doFirst {
        delete 'src/main/resources/static/docs'
    }
}

// Spring Rest Docs
bootJar {
    dependsOn asciidoctor
    copy {
        from asciidoctor.outputDir
        into "src/main/resources/static/docs"
    }
}

jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {
    dependsOn test // 리포트 생성을 위해서는 test가 먼저 완료되어야 함
    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/adapter/in/request/**',
                            '**/adapter/in/web/CustomExceptionHandler*',
                            '**/adapter/out/persistence/*JpaEntity*',
                            '**/adapter/out/persistence/*Mapper*',
                            '**/adapter/out/response/**',
                            '**/application/kafka/**',
                            '**/application/port/**',
                            '**/domain/constant/**',
                            '**/domain/constant/**',
                            '**/HealthCheckController*',
                            '**/UserServiceApplication*'
                    ])
                })
        )
    }

    finalizedBy 'jacocoTestCoverageVerification'  // 래포트 종료후 커버리지 체크
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 200
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }

            excludes = [
                    '***Mapper*',
                    '**CustomExceptionHandler*',
                    '**Kafka*',
                    '**HealthCheckController*',
                    '**UserServiceApplication*'
            ]
        }
    }
}