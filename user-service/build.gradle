buildscript {
    ext {
        restdocsApiSpecVersion = '0.16.2'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.1'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
//    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
    id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'user'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

repositories {
    mavenCentral()
}

swaggerSources {
    sample {
        setInputFile(file("${project.buildDir}/api-spec/openapi3.json"))
    }
}

ext {
    set('springCloudVersion', "2021.0.4")
}

// Spring Rest Docs
//configurations {
//    asciidoctorExt
//}

// 3. openapi3 설정
openapi3 {
    setServer("http://localhost:8080") // API 요청을 보낼 서버 주소 설정
    title = "restdocs-swagger API Documentation" // API 문서 제목
    description = "Spring REST Docs with SwaggerUI." // API 문서 설명
    version = "0.0.1" // API 문서 버전
    format = "json" // API 문서 출력 포맷 (default = JSON)

//    outputDirectory = 'build/resources/main/static/docs'
}

dependencies {
    // common module
    implementation project(path: ':common')

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.jetbrains:annotations:20.1.0'

    testImplementation 'junit:junit:4.13.1'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // H2
    testImplementation 'com.h2database:h2:1.4.200'

    // Junit5
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    // Gson
    implementation 'com.google.code.gson:gson:2.9.0'

    // Netflix-eureka
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.1.0'

    // kafka
    implementation 'org.springframework.kafka:spring-kafka'

    // Spring Rest Docs
//    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
//    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // Spring Rest Docs
    testImplementation "com.epages:restdocs-api-spec-mockmvc:${restdocsApiSpecVersion}"

    // Spring Swagger
    swaggerUI 'org.webjars:swagger-ui:4.11.1'
}

// Spring Rest Docs
//ext {
//    snippetsDir = file('build/generated-snippets') // 아래서 사용할 변수
//}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'  // 테스트 종료후 항상 리포트 생성
//    outputs.dir snippetsDir // Spring Rest Docs
}

//bootJar{
//    dependsOn(':openapi3')
//}

// 3.4. Task 및 설정 추가
// 3.4.1
// GenerateSwaggerUI 태스크가, openapi3 task 를 의존하도록 설정
tasks.withType(GenerateSwaggerUI) {
    dependsOn 'openapi3'
}

// 3.4.2
// 생성된 SwaggerUI 를 jar 에 포함시키기 위해 build/resources 경로로 로 복사
tasks.register('copySwaggerUI', Copy) {
    dependsOn 'generateSwaggerUISample'
    def generateSwaggerUISampleTask = tasks.named('generateSwaggerUISample', GenerateSwaggerUI).get()
    from("${generateSwaggerUISampleTask.outputDir}")
    into("${project.buildDir}/resources/main/static/docs")
}

// 3.4.3
// bootJar 실행 전, copySwaggerUI 를 실행하도록 설정
bootJar {
    dependsOn 'copySwaggerUI'
}

// Spring Rest Docs
//asciidoctor {
//    inputs.dir snippetsDir
//    configurations 'asciidoctorExt'
//    dependsOn test
//    doFirst {
//        delete 'src/main/resources/static/docs'
//    }
//}

// Spring Rest Docs
//bootJar {
//    dependsOn asciidoctor
//    copy {
//        from asciidoctor.outputDir
//        into "src/main/resources/static/docs"
//    }
//}

jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {
    dependsOn test // 리포트 생성을 위해서는 test가 먼저 완료되어야 함
    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/adapter/in/request/**',
                            '**/adapter/in/web/CustomExceptionHandler*',
                            '**/adapter/out/persistence/*JpaEntity*',
                            '**/adapter/out/persistence/*Mapper*',
                            '**/adapter/out/response/**',
                            '**/application/kafka/**',
                            '**/application/port/**',
                            '**/domain/constant/**',
                            '**/domain/constant/**',
                            '**/HealthCheckController*',
                            '**/UserServiceApplication*'
                    ])
                })
        )
    }

    finalizedBy 'jacocoTestCoverageVerification'  // 래포트 종료후 커버리지 체크
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 200
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }

            excludes = [
                    '***Mapper*',
                    '**CustomExceptionHandler*',
                    '**Kafka*',
                    '**HealthCheckController*',
                    '**UserServiceApplication*'
            ]
        }
    }
}